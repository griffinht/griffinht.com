coreos sucks - see how to enable systemd unit on boot
debian is fine - standard unix experience, conigure with ansible

how can i test coreos? every time i have to deploy to a real system?
    - i have to test with qemu? so fat!
    - https://docs.fedoraproject.org/en-US/fedora-coreos/provisioning-qemu/

how can i manage my machine's config? and keep it up to date? guix!
how do i change a simple config without reprovisioning the entire machine? guix!

https://stumbles.id.au/getting-started-with-guix-deploy.html

https://guix.gnu.org/manual/en/html_node/Invoking-guix-system.html
we can make a basic guix image by defining a simple operating system then first test this as a lightweight docker container! or qemu or whatver its just a system image
then we deploy ONCE not everytime we change a config as we would with immutable coreos
then we use guix deploy to manage the config - no more entire redeploys! we can change everything! 100% rollback!



testing with docker
not quite because some weird networking issues todo basically i can't get herd services loopback or networking which ssh-daemon depends on because of a netlink error or something probably becaus of docker networking and thanks to me using podman

rootless fake docker with podman
    networking fails
    loopback fails
hot-desktop real docker
    networking starts, loopback does't same error

potentially related to ? https://issues.guix.gnu.org/issue/34333

DEBUG PROCESS

```
docker exec -it "$(cat rundocker)" /run/current-system/profile/bin/bash --login
root@3ef840fc2d3d /# herd status
Started:
 + file-systems
 + guix-daemon
 + mcron
 + networking
 + nscd
 + pam
 + root
 + root-file-system
 + syslogd
 + udev
 + urandom-seed
 + user-file-systems
 + user-processes
 + virtual-terminal
Stopped:
 - ssh-daemon
One-shot:
 * host-name
 * sysctl
 * user-homes
Failed to start:
 ! loopback
root@3ef840fc2d3d /# herd start loopback
herd: error: exception caught while executing 'start' on service 'loopback':
Throw to key `%exception' with args `("#<&netlink-response-error errno: 1>")'.
root@3ef840fc2d3d /# herd start ssh-daemon
Exception caught while starting loopback: (%exception #<&netlink-response-error errno: 1>)
Service user-homes has been started.
Service ssh-daemon depends on loopback.
herd: error: failed to start service ssh-daemon
```

trying this out on a real docker daemon system yields mostly the same results except the networking service does start, but loopback fails still

Oh no! looks like this whole guix thing is a buggy mess, I suppose we should give up. What even are these error messages?
Shepherd, the init system used by Guix, is trying to start ssh-daemon for us. But ssh-daemon depends on the loopback service, which is failing to start because 
herd: error: exception caught while executing 'start' on service 'loopback':
Throw to key `%exception' with args `("#<&netlink-response-error errno: 1>")'.

So some kind of netlink issue? What gives?
let's read the excellent documentation https://guix.gnu.org/manual/en/html_node/Invoking-guix-system.html
Last, the --network option applies to guix system docker-image: it produces an image where network is supposedly shared with the host, and thus without services like nscd or NetworkManager.

Using the --network option when building our docker image with `guix system` will disable Guix's networking services. We want this! What happens currently is Guix tries to start its own entire standalone network stack in a docker container, which conflicts with docker's networking!

Let's try this again

guix system image --image-type=docker --network > file
docker load < file
docker run --rm -it -p 2222:22 localhost/guix:latest

Success!
ssh root@localhost -p 2222
note the only reason im doing ssh on a diff port is because like most linux machines non root users can't bind to ports lower than 1024 for old security reasons see more





also check out the handy dandy makefile i made to debug this!


# guix archive
You need to make sure the host machine has xxxx read more on guix archive page

```
sudo guix archive --generate-key
```

# guix deploy
guix deploy: error: failed to deploy envy-laptop: failed to authenticate server at 'localhost': known-changed
- the ssh fingerprint for localhost has a different fingerprint than what it is currently
- normally ssh screams about fishy business when this happens

guix deploy: error: failed to deploy envy-laptop: failed to authenticate server at '127.0.0.1': not-known
- the ssh fingerprint is unknown
- normally ssh prompts you to add the new fingerprint interactively

todo copy paste the (list (machine info with comments
also the guix docs on this were mad terse maybe consider contributing







# DEPLOYING TO BARE METAL

a physical machine has it's own challenges
a vm or vps you just put the iso up in the cloud and you are good
but a physical machine needs boot stuff and partitioning best left to automatic tools
best solution?? its bad
regular guix iso from website, (keep in mind this is very easy to create and installL!!!!)
then go through graphical install process
    todo modify this with ssh keys so we can guix deploy!?
then get ssh access
then guix deploy but make sure to respect the original disk setup!
it works! guix deploy on bare metal!

guix deploy: sending 15 store items (105 MiB) to '192.168.0.6'...
guix deploy: successfully deployed envy-laptop




we need other services, documentation is a little sparse and tricky to figure out
error messages are useless! guix moment
Cannot connect to the Docker daemon at http://docker.example.com. Is the docker daemon running?

add your user to docker group
`(supplementarygroup docker) or whatever it is
